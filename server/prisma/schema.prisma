generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model address {
  id        String    @id @default(uuid())
  street    String
  city      String
  uf        String
  zipCode   String
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  users     user[]
}

model user {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  password     String
  lastAccess   DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?
  addressId    String?
  clients      client[]
  payments     payment[]
  reservations reservation[]
  address      address?      @relation(fields: [addressId], references: [id])
}

model reservation {
  id          String     @id @default(uuid())
  startTime   DateTime
  endTime     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?
  vehicleId   String
  userId      String
  parkingId   String
  payments    payment[]
  parkingLott parkingLot @relation(fields: [parkingId], references: [id])
  user        user       @relation(fields: [userId], references: [id])
  vehicle     vehicle    @relation(fields: [vehicleId], references: [id])
}

model parkingLot {
  id            String        @id @default(uuid())
  name          String
  amountPerHour Float
  capacity      Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime?
  reservations  reservation[]
}

model payment {
  id            String      @id @default(uuid())
  amount        Float
  paymentDate   DateTime?
  userId        String
  reservationId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime?
  reservation   reservation @relation(fields: [reservationId], references: [id])
  user          user        @relation(fields: [userId], references: [id])
}

model client {
  id              String            @id @default(uuid())
  userId          String
  planId          String?
  name            String
  email           String            @unique
  phoneNumber     String
  cpf             String            @unique
  gender          String?
  birthDate       DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?
  plan            plan?             @relation(fields: [planId], references: [id])
  user            user              @relation(fields: [userId], references: [id])
  clientsVehicles clientsVehicles[]
  vehicles        vehicle[]
}

model vehicle {
  id              String            @id @default(uuid())
  clientId        String
  name            String
  plate           String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?
  clientsVehicles clientsVehicles[]
  reservations    reservation[]
  client          client            @relation(fields: [clientId], references: [id])
}

model clientsVehicles {
  id        String    @id @default(uuid())
  clientId  String
  vehicleId String
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  client    client    @relation(fields: [clientId], references: [id])
  vehicle   vehicle   @relation(fields: [vehicleId], references: [id])
}

model plan {
  id        String    @id @default(uuid())
  amount    Float
  finalDate DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  clients   client[]
}
