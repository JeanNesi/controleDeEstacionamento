generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_URL")
}

model addresses {
  id        String    @id @default(uuid())
  street    String
  city      String
  uf        String
  zipCode   String
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  user      users[]
}

model users {
  id         String     @id @default(uuid())
  name       String
  email      String     @unique
  password   String
  lastAccess DateTime?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime?
  addressId  String?
  address    addresses? @relation(fields: [addressId], references: [id], onUpdate: NoAction, onDelete: NoAction)

  clients clients[]
}

model reservations {
  id        String     @id @default(uuid())
  startTime DateTime
  endTime   DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime?
  vehicleId String
  parkingId String
  payments  payments[]

  clientId String?
  client   clients? @relation(fields: [clientId], references: [id], onUpdate: NoAction, onDelete: NoAction)

  parking parkingLot @relation(fields: [parkingId], references: [id])
  vehicle vehicles   @relation(fields: [vehicleId], references: [id])
}

model parkingLot {
  id            String         @id @default(uuid())
  name          String
  amountPerHour Decimal        @db.Decimal(10, 2)
  capacity      Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?
  reservations  reservations[]
}

model payments {
  id            String    @id @default(uuid())
  amount        Decimal   @db.Decimal(10, 2)
  paymentDate   DateTime?
  reservationId String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?
  clientId      String?
  client        clients?  @relation(fields: [clientId], references: [id], onUpdate: NoAction, onDelete: NoAction)

  reservation reservations @relation(fields: [reservationId], references: [id])
}

model clients {
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  phoneNumber String
  cpf         String    @unique
  gender      String?
  birthDate   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  planId      String?

  plan plan? @relation(fields: [planId], references: [id], onUpdate: NoAction, onDelete: NoAction)

  userId String
  user   users  @relation(fields: [userId], references: [id], onUpdate: NoAction, onDelete: NoAction)

  clientsVehicles clientsVehicles[]
  payment         payments[]
  reservation     reservations[]
  vehicles        vehicles[]
}

model vehicles {
  id              String            @id @default(uuid())
  clientId        String
  name            String
  plate           String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?
  planId          String?
  clientsVehicles clientsVehicles[]
  reservations    reservations[]
  client          clients           @relation(fields: [clientId], references: [id])
  plan            plan?             @relation(fields: [planId], references: [id])
}

model clientsVehicles {
  id        String    @id @default(uuid())
  vehicleId String
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  clientId  String
  client    clients   @relation(fields: [clientId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  vehicle vehicles @relation(fields: [vehicleId], references: [id])
}

model plan {
  id        String     @id @default(uuid())
  amount    Decimal    @db.Decimal(10, 2)
  finalDate DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime?
  clients   clients[]
  vehicles  vehicles[]
}
